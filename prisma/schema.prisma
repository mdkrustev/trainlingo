// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema   

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init      

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  googleId       String   @unique
  accessToken    String?
  refreshToken   String?
  accessTokenExp Int?
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  topics  Topic[]
  quizzes DictionaryQuiz[]
}

model Topic {
  id             String   @id @default(uuid())
  youtubeVideoId String?
  name           String?
  categoryKey    String?
  languageKey    String?
  ownerId        String
  owner          User     @relation(fields: [ownerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Добавяме обратната връзка към DictionaryToTopic:
  dictionaryRefs DictionaryToTopic[]
}

model Dictionary {
  id           String   @id @default(uuid())
  wordEn       String?
  wordDe       String?
  wordNative   String?
  contextEn    String?
  contextDe    String?
  contextNativ String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  quizEntries DictionaryQuizEntry[]

  // Връзка към DictionaryToTopic
  topicRefs DictionaryToTopic[]
}

model DictionaryToTopic {
  id           Int    @id @default(autoincrement())
  topicId      String
  dictionaryId String

  topic      Topic      @relation(fields: [topicId], references: [id])
  dictionary Dictionary @relation(fields: [dictionaryId], references: [id])

  @@unique([topicId, dictionaryId]) // уникална комбинация от тема и дума
}

model DictionaryQuiz {
  id           String                @id @default(uuid())
  userId       String
  user         User                  @relation(fields: [userId], references: [id])
  startedAt    DateTime              @default(now())
  finishedAt   DateTime?
  entries      DictionaryQuizEntry[]
  quizType     QuizType
  durationSec  Int
  correctCount Int                   @default(0)
  totalCount   Int                   @default(0)
}

model DictionaryQuizEntry {
  id           String         @id @default(uuid())
  quizId       String
  quiz         DictionaryQuiz @relation(fields: [quizId], references: [id])
  dictionaryId String
  dictionary   Dictionary     @relation(fields: [dictionaryId], references: [id])
  questionType QuestionType
  answerGiven  String?
  isCorrect    Boolean
  timeTakenSec Int
  askedAt      DateTime       @default(now())
}

enum QuestionType {
  NATIVE_TO_DE
  NATIVE_TO_EN
  EN_TO_NATIVE
  DE_TO_NATIVE
  MIXED
}

enum QuizType {
  DEFAULT
  FLASHCARD
  TIMED
}
